import{e as G,f as n,o as r,c,d as t,t as l,a as e,w as f,v as k,g as T,T as $,h as b,i as E,r as S,F as D,j as C,n as m,b as w,p as H,k as N,_ as O,l as V,m as A,S as L}from"./index-3b3460e0.js";const x={key:0,style:{color:"brown"}},B={key:1,style:{color:"blueviolet"}},M=G({__name:"ToDoItemNew",props:{title:null},setup(d){const a=n(""),i=n(""),g=n(new Date),p=n(""),h=n(!1),u=n(""),s=n(!1),o=async()=>{p.value="",h.value=!1,u.value="",s.value=!1,g.value=new Date;try{let I={title:a.value,notes:i.value,created:g.value,state:$.New};const _=await b.todos.add(I);u.value=`added todo : ${_}`}catch(I){p.value=`Failed to add: ${I}`}h.value=p.value.length>0,s.value=u.value.length>0};return(I,_)=>(r(),c("div",null,[t("p",null,[t("b",null,l(d.title),1)]),e(),t("p",null,[e("Title: "),f(t("input",{"onUpdate:modelValue":_[0]||(_[0]=y=>a.value=y),type:"text"},null,512),[[k,a.value]])]),e(),t("p",null,[e("Notes: "),f(t("input",{"onUpdate:modelValue":_[1]||(_[1]=y=>i.value=y),type:"text"},null,512),[[k,i.value]])]),e(),t("p",null,[t("button",{onClick:o},"Add")]),e(),h.value?(r(),c("p",x,"Error: "+l(p.value),1)):T("",!0),e(),s.value?(r(),c("p",B,"Message: "+l(u.value),1)):T("",!0)]))}}),v=d=>(H("data-v-d760711e"),d=d(),N(),d),F={class:"todoGrid"},U=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 1"}},"id",-1)),W=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 2"}},"title",-1)),j=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 3"}},"created",-1)),q=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 4"}},"notes",-1)),z=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 5"}},"state",-1)),P=v(()=>t("div",{class:"todoGridHeader",style:{"grid-row":"1, grid-column: 6"}},"updated",-1)),Q=G({__name:"ToDoItemListAll",props:{title:null},async setup(d){let a,i;const g=n(([a,i]=E(()=>b.todos.toArray()),a=await a,i(),a));return(p,h)=>{const u=S("status");return r(),c("div",null,[t("p",null,[t("b",null,l(d.title),1)]),e(),t("div",F,[U,e(),W,e(),j,e(),q,e(),z,e(),P,e(),(r(!0),c(D,null,C(g.value,(s,o)=>(r(),c(D,null,[t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"1"}},l(s.id),3),e(),t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"2"}},l(s.title),3),e(),t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"3"}},l(s.created),3),e(),t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"4"}},l(s.notes),3),e(),t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"5"}},[w(u,{val:s.state},null,8,["val"])],2),e(),t("div",{class:m(["todoGridItem",{todoGridItemEven:o%2==0,todoGridItemOdd:o%2==1}]),style:{"grid-column":"6"}},l(s.updated),3)],64))),256))])])}}});const J=O(Q,[["__scopeId","data-v-d760711e"]]),K=t("h1",null,"To Do Page",-1),R=t("p",null,`\r
      The obligatory implementation of a simple To-Do app.  \r
      Since I don't want the hassle of an actual backend datastore \r
      (like SQL Server or Mongo DB) I'm using Dexie to store.\r
    `,-1),X=t("p",null,"We'll have two separate sorts of tasks: Once-and-done tasks and tasks that repeat and can be assigned days of the week.",-1),Y=t("p",null,`We've got a bare-bones dexie implementation.  \r
      It isn't reactive or dynamic and a manual page refresh is required for new to do items to show up in the list.\r
      That is something we will fix next.`,-1),Z=t("h2",null,"To Do Items",-1),et=G({__name:"ToDoView",setup(d){return(a,i)=>(r(),c("main",null,[K,e(),R,e(),X,e(),Y,e(),Z,e(),w(M,{title:"Create a new To Do Item"}),e(),(r(),V(L,null,{default:A(()=>[w(J,{title:"List of all To Do Items"})]),_:1}))]))}});export{et as default};
